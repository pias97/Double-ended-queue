# -*- coding: utf-8 -*-
"""problem_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jyT5J59KHhEt2W2iaEvrW3PihpVVplPK
"""

class Double_Ended_Q:
    def __init__(self):
        self.items = []

    def isNull(self):
        return self.items == []

    def add_Back(self, item):
        self.items.append(item)

    def add_Front(self, item):
        self.items.insert(0,item)

    def remove_Back(self):
        return self.items.pop()

    def remove_Front(self):
        return self.items.pop(0)

    def all_Ele_print(self):
        return self.items

    def print_Front(self):
        return self.items[0]

    def print_Back(self):
        return self.items[-1]

obj1 = Double_Ended_Q()

file = open("input.txt", 'r')

for line in file:
    char = line[0:1]
    value = line[2:]

    if char == 'A':
      obj1.add_Front(int(value))

    elif char == 'B':
      obj1.add_Back(int(value))

    elif char == 'C':
      if obj1.isNull():
        print('No element to REMOVE in front')
      else:
        obj1.remove_Front()

    elif char == 'D':
      if obj1.isNull():
        print('No element to REMOVE in back')
      else:
        obj1.remove_Back()

    elif char == 'E':
      if obj1.isNull():
        print('No element to PRINT in front')
      else:
        val = obj1.print_Front()
        print(val)

    elif char == 'F':
      if obj1.isNull():
        print('No element to PRINT in back')
      else:
        val = obj1.print_Back()
        print(val)